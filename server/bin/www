#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var connectDB = require('../db/db');
var socketio = require('socket.io');
var jwt = require('jsonwebtoken');
const { response } = require('express');

/**
 * Connect to the database
 */
connectDB();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Socket Connection
 */
var io = socketio(server);
io.use(async (socket, next) => {
  try {
    const token = socket.handshake.headers.cookie;
    const payload = await jwt.verify(token, process.env.JWT_SECRET);
    socket.userId = payload.indexOf;
    next();
  } catch (err) {
    return err;
  }
});

io.on('connection', (socket) => {
  console.log('connected on: ', socket.userId);
  socket.emit('Your socket id', socket.id);
  socket.on('Send message', (body) => {
    io.emit('message', body);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  console.log('Listening on ' + bind);
}
